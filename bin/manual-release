#!/bin/bash
#
# Manual/break-glass release script for ghavm
#
# This script provides a way to create releases manually when GitHub Actions
# is down or unavailable. It performs the same steps as the automated workflow:
# 1. Builds binaries and Docker images with goreleaser
# 2. Signs Docker images with cosign
# 3. Generates and uploads SLSA provenance (optional)
#
# Usage:
#   GITHUB_TOKEN=<token> ./bin/manual-release [--snapshot]
#
# Requirements:
#   - GITHUB_TOKEN environment variable
#   - Docker running and authenticated to registries
#   - Git tag must already exist (unless --snapshot)
#

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}ℹ${NC} $*"
}

log_success() {
    echo -e "${GREEN}✅${NC} $*"
}

log_warning() {
    echo -e "${YELLOW}⚠️${NC} $*"
}

log_error() {
    echo -e "${RED}❌${NC} $*"
}

# Check if we're in snapshot mode
SNAPSHOT_MODE=false
if [[ "${1:-}" == "--snapshot" ]]; then
    SNAPSHOT_MODE=true
    shift
fi

# Banner
echo -e "${BLUE}"
echo "╔══════════════════════════════════════════════════════════════╗"
echo "║                    Manual Release Script                     ║"
echo "║              GitHub Actions Break-Glass Process              ║"
echo "╚══════════════════════════════════════════════════════════════╝"
echo -e "${NC}"

if [[ "$SNAPSHOT_MODE" == "true" ]]; then
    log_info "Running in SNAPSHOT mode (no push, no GitHub release)"
else
    log_warning "Running in RELEASE mode (will push to registries and GitHub)"
fi

# Environment checks
log_info "Checking prerequisites..."

# Check GITHUB_TOKEN
if [[ -z "${GITHUB_TOKEN:-}" ]]; then
    log_error "GITHUB_TOKEN environment variable is required"
    exit 1
fi
log_success "GITHUB_TOKEN is set"

# Check Docker
if ! docker info >/dev/null 2>&1; then
    log_error "Docker is not running or accessible"
    exit 1
fi
log_success "Docker is accessible"

# Check required tools
for tool in jq git go; do
    if ! command -v "$tool" >/dev/null 2>&1; then
        log_error "Required tool '$tool' is not installed"
        exit 1
    fi
done
log_success "Required tools available"

# Check if we're in the right directory
if [[ ! -f ".goreleaser.yaml" ]]; then
    log_error "Must be run from the repository root (no .goreleaser.yaml found)"
    exit 1
fi

# Git checks (skip for snapshot)
if [[ "$SNAPSHOT_MODE" == "false" ]]; then
    log_info "Checking git state..."

    # Check if we're on a tag
    if ! git describe --exact-match --tags HEAD >/dev/null 2>&1; then
        log_error "Current commit is not tagged. Create and push a git tag first:"
        echo "  git tag v1.0.0"
        echo "  git push origin v1.0.0"
        exit 1
    fi

    current_tag=$(git describe --exact-match --tags HEAD)
    log_success "Current tag: $current_tag"

    # Check if tag exists on remote
    if ! git ls-remote --exit-code --tags origin "$current_tag" >/dev/null 2>&1; then
        log_error "Tag $current_tag not found on remote. Push it first:"
        echo "  git push origin $current_tag"
        exit 1
    fi
    log_success "Tag exists on remote"
fi

# Docker authentication check
log_info "Checking Docker registry authentication..."

# Test Docker Hub auth
if ! docker info | grep -q "Username:"; then
    log_warning "Not authenticated to Docker Hub. Run: docker login"
    if [[ "$SNAPSHOT_MODE" == "false" ]]; then
        exit 1
    fi
else
    log_success "Docker Hub authentication verified"
fi

# Test GHCR auth
log_info "Testing GitHub Container Registry access..."
if echo "$GITHUB_TOKEN" | docker login ghcr.io -u "$(gh api user --jq .login 2>/dev/null || echo "token")" --password-stdin >/dev/null 2>&1; then
    log_success "GitHub Container Registry authentication successful"
else
    log_warning "GitHub Container Registry authentication failed"
    if [[ "$SNAPSHOT_MODE" == "false" ]]; then
        exit 1
    fi
fi

# Confirmation for release mode
if [[ "$SNAPSHOT_MODE" == "false" ]]; then
    echo
    log_warning "⚠️  This will create and push a REAL RELEASE! ⚠️"
    log_warning "⚠️  Make sure you've created the GitHub release via the web UI! ⚠️"
    echo
    read -p "Are you sure you want to continue? [y/N] " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        log_info "Aborted by user"
        exit 0
    fi
fi

# Run goreleaser
log_info "Running goreleaser..."
if [[ "$SNAPSHOT_MODE" == "true" ]]; then
    if ! go run github.com/goreleaser/goreleaser@v2.11.0 release --snapshot --clean; then
        log_error "Goreleaser failed"
        exit 1
    fi
    log_success "Snapshot release completed - check the dist/ directory"
    log_info "Docker images built locally but not pushed"
    exit 0
else
    if ! go run github.com/goreleaser/goreleaser@v2.11.0 release --clean; then
        log_error "Goreleaser failed"
        exit 1
    fi
    log_success "Goreleaser completed successfully"
fi

# Install cosign if not present
if ! command -v cosign >/dev/null 2>&1; then
    log_info "Installing cosign..."
    go install github.com/sigstore/cosign/v2/cmd/cosign@latest
fi

# Sign Docker images
log_info "Signing Docker images and manifests..."

# Sign individual architecture images
if jq -r '.[] | select(.type=="Docker Image") | .name' dist/artifacts.json | while read -r image; do
    log_info "Signing image: $image"
    if ! cosign sign --yes "$image"; then
        log_error "Failed to sign image: $image"
        exit 1
    fi
done; then
    log_success "All Docker images signed"
else
    log_error "Docker image signing failed"
    exit 1
fi

# Sign multi-arch manifests
if jq -r '.[] | select(.type=="Docker Manifest") | .name' dist/artifacts.json | while read -r manifest; do
    log_info "Signing manifest: $manifest"
    if ! cosign sign --yes "$manifest"; then
        log_error "Failed to sign manifest: $manifest"
        exit 1
    fi
done; then
    log_success "All Docker manifests signed"
else
    log_error "Docker manifest signing failed"
    exit 1
fi

# Success message
echo
log_success "✨ Manual release completed successfully! ✨"
echo
log_info "What was done:"
echo "  • Built binaries for multiple platforms"
echo "  • Created and pushed Docker images to both registries"
echo "  • Signed all Docker images and manifests with cosign"
echo "  • Uploaded release assets to GitHub"
echo
log_info "Users can now:"
echo "  • Download binaries from the GitHub release"
echo "  • Pull Docker images: docker pull mccutchen/ghavm:latest"
echo "  • Verify signatures: cosign verify mccutchen/ghavm:latest \\"
echo "      --certificate-identity-regexp='.*' \\"
echo "      --certificate-oidc-issuer=https://token.actions.githubusercontent.com"
echo
