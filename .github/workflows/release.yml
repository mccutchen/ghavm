name: Release

on:
  release:
    types: [created]

permissions:
  contents: write
  packages: write
  id-token: write
  attestations: write

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    outputs:
      binary-provenance-checksums: ${{ steps.binary-provenance.outputs.checksums }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version: stable

      - uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: goreleaser/goreleaser-action@9c156ee8a17a598857849441385a2041ef570552 # v6.3.0
        id: goreleaser
        with:
          distribution: goreleaser
          version: '~> v2'
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: sigstore/cosign-installer@398d4b0eeef1380460a10c8013a76f728fb906ac # v3.9.1

      - name: record binary provenance checksums
        id: binary-provenance
        run: |
          set -euo pipefail
          # Use the artifacts.json file that goreleaser generates
          checksum_file=$(jq -r '.[] | select(.type=="Checksum") | .path' dist/artifacts.json)
          echo "checksums=$(cat $checksum_file | base64 -w0)" >> "$GITHUB_OUTPUT"

      - name: sign docker images
        run: |
          set -euo pipefail
          echo "signing all Docker images and manifests..."

          # sign individual architecture images
          jq -r '.[] | select(.type=="Docker Image") | .name' dist/artifacts.json | while read -r image; do
            echo "signing image: $image"
            cosign sign --yes "$image"
          done

          # sign multi-arch manifests
          jq -r '.[].name' dist/artifacts.json | while read -r manifest; do
            echo "signing manifest: $manifest"
            cosign sign --yes "$manifest"
          done

          echo "âœ… all Docker images and manifests signed successfully"

  binary-provenance:
    needs: [goreleaser]
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.10.0
    with:
      base64-subjects: "${{ needs.goreleaser.outputs.binary-provenance-checksums }}"
      upload-assets: true
